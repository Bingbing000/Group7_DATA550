}else{
ATE_hat <- EY1_hat / EY0_hat
}
return(c(
EY0_hat, EY1_hat, ATE_hat
))
}
# get point estimates
pt_est <- get_gcomp(input_data = covid19)
# function to do one bootstrap analysis
# input_data = the original data set
one_boot <- function(input_data, ratio = FALSE){
n <- dim(input_data)[1]
# sample with replacement from input_data
boot_row_idx <- sample(1:n, replace = TRUE)
boot_data <- input_data[boot_row_idx, ]
# get g-comp estimates on bootstrap data
boot_est <- get_gcomp(input_data = boot_data, ratio = ratio)
return(boot_est)
}
M <- 1000
boot_estimates <- replicate(M, one_boot(input_data = covid19))
# to get a data.frame with rows = bootstrap samples, columns = estimates
boot_estimates_df <- data.frame(t(boot_estimates))
colnames(boot_estimates_df) <- c(
"EY0_hat", "EY1_hat", "ATE_hat"
)
# make percentile confidence intervals
ci_EY0 <- quantile(
boot_estimates_df$EY0_hat,
p = c(0.025, 0.975)
)
# make "Wald-style" or Normal confidence interval
se_EY0_hat <- sd(boot_estimates_df$EY0_hat)
ci_EY0_wald <- c(
pt_est[1] - 1.96 * se_EY0_hat,
pt_est[1] + 1.96 * se_EY0_hat
)
# make "Wald-style" or Normal test statistic
# two-sided test of H0: ATE = 0
null_value <- 0
ATE_est <- pt_est[3]
se_ATE <- sd(boot_estimates_df$ATE_hat)
test_stat <- (ATE_est - null_value) / se_ATE
pvalue <- 2*pnorm(-abs(test_stat))
# note about ratio scale
boot_estimates_ratio <- replicate(
M, one_boot(input_data = covid19, ratio = TRUE)
)
# to get a data.frame with rows = bootstrap samples, columns = estimates
boot_estimates_df_ratio <- data.frame(t(boot_estimates_ratio))
colnames(boot_estimates_df_ratio) <- c(
"EY0_hat", "EY1_hat", "ATE_hat"
)
# get a confidence interval for the *log* risk ratio
boot_estimates_df_ratio$log_ATE_hat <- log(boot_estimates_df_ratio$ATE_hat)
se_log_ATE_hat <- sd(boot_estimates_df_ratio$log_ATE_hat)
pt_est_ratio <- get_gcomp(input_data = covid19, ratio = TRUE)
log_ATE_hat <- log(pt_est_ratio[3])
ci_log_ATE <- c(
log_ATE_hat - 1.96 * se_log_ATE_hat,
log_ATE_hat + 1.96 * se_log_ATE_hat
)
# risk ratio CI
ci_ATE <- exp(ci_log_ATE)
# Bootstrapping
library(drord)
data(covid19)
covid19$out01 <- as.numeric(covid19$out == 3)
# function to get g-comp point est of E[Y(1)], E[Y(0)], ATE
get_gcomp <- function(input_data, ratio = FALSE){
# fit outcome regression
or_fit <- glm(
out01 ~ treat + age_grp,
family = binomial(),
data = input_data
)
# set up prediction data frames
input_data_treat1 <- input_data
input_data_treat1$treat <- 1
input_data_treat0 <- input_data
input_data_treat0$treat <- 0
# predict from outcome model
pred1 <- predict(
or_fit, newdata = input_data_treat1, type = "response"
)
pred0 <- predict(
or_fit, newdata = input_data_treat0, type = "response"
)
# average predictions
EY1_hat <- mean(pred1)
EY0_hat <- mean(pred0)
if(!ratio){
ATE_hat <- EY1_hat - EY0_hat
}else{
ATE_hat <- EY1_hat / EY0_hat
}
return(c(
EY0_hat, EY1_hat, ATE_hat
))
}
# get point estimates
pt_est <- get_gcomp(input_data = covid19)
# function to do one bootstrap analysis
# input_data = the original data set
one_boot <- function(input_data, ratio = FALSE){
n <- dim(input_data)[1]
# sample with replacement from input_data
boot_row_idx <- sample(1:n, replace = TRUE)
boot_data <- input_data[boot_row_idx, ]
# get g-comp estimates on bootstrap data
boot_est <- get_gcomp(input_data = boot_data, ratio = ratio)
return(boot_est)
}
M <- 1000
boot_estimates <- replicate(M, one_boot(input_data = covid19))
# to get a data.frame with rows = bootstrap samples, columns = estimates
boot_estimates_df <- data.frame(t(boot_estimates))
colnames(boot_estimates_df) <- c(
"EY0_hat", "EY1_hat", "ATE_hat"
)
# make percentile confidence intervals
ci_EY0 <- quantile(
boot_estimates_df$EY0_hat,
p = c(0.025, 0.975)
)
# make "Wald-style" or Normal confidence interval
se_EY0_hat <- sd(boot_estimates_df$EY0_hat)
ci_EY0_wald <- c(
pt_est[1] - 1.96 * se_EY0_hat,
pt_est[1] + 1.96 * se_EY0_hat
)
# make "Wald-style" or Normal test statistic
# two-sided test of H0: ATE = 0
null_value <- 0
ATE_est <- pt_est[3]
se_ATE <- sd(boot_estimates_df$ATE_hat)
test_stat <- (ATE_est - null_value) / se_ATE
pvalue <- 2*pnorm(-abs(test_stat))
# note about ratio scale
boot_estimates_ratio <- replicate(
M, one_boot(input_data = covid19, ratio = TRUE)
)
# to get a data.frame with rows = bootstrap samples, columns = estimates
boot_estimates_df_ratio <- data.frame(t(boot_estimates_ratio))
colnames(boot_estimates_df_ratio) <- c(
"EY0_hat", "EY1_hat", "ATE_hat"
)
# get a confidence interval for the *log* risk ratio
boot_estimates_df_ratio$log_ATE_hat <- log(boot_estimates_df_ratio$ATE_hat)
se_log_ATE_hat <- sd(boot_estimates_df_ratio$log_ATE_hat)
pt_est_ratio <- get_gcomp(input_data = covid19, ratio = TRUE)
log_ATE_hat <- log(pt_est_ratio[3])
ci_log_ATE <- c(
log_ATE_hat - 1.96 * se_log_ATE_hat,
log_ATE_hat + 1.96 * se_log_ATE_hat
)
# risk ratio CI
ci_ATE <- exp(ci_log_ATE)
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
data <- read.csv(
file = here::here("raw_data/covid_sub.csv")
)
# Convert categorical columns to factors
data <- data %>%
mutate_at(vars(USMER, SEX, PATIENT_TYPE, INTUBED, PNEUMONIA, PREGNANT, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU), factor)
# Handling missing values: For simplicity, we'll convert NAs in binary columns to "Unknown"
binary_columns <- c("INTUBED", "PNEUMONIA", "PREGNANT", "DIABETES", "COPD", "ASTHMA", "INMSUPR", "HIPERTENSION", "OTHER_DISEASE", "CARDIOVASCULAR", "OBESITY", "RENAL_CHRONIC", "TOBACCO", "ICU")
data[binary_columns] <- lapply(data[binary_columns], function(x) addNA(x, ifany = TRUE))
# Assuming 'DATE_DIED' is NA for patients who didn't die, creating a binary outcome variable for mortality
data$DIED <- ifelse(is.na(data$DATE_DIED), "No", "Yes")
# Create a subset of data focusing on patient outcomes and conditions
analysis_data <- data %>%
select(SEX, AGE, PATIENT_TYPE, DIED, INTUBED, PNEUMONIA, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU)
# Creating a graph to analyze treatment outcomes and healthcare utilization
# Grouping age into categories
analysis_data$AGE_GROUP <- cut(analysis_data$AGE, breaks = c(0, 18, 40, 60, 80, Inf), labels = c("0-18", "19-40", "41-60", "61-80", "81+"), right = FALSE)
# Calculating mortality rate by age group and any pre-existing condition
mortality_rate <- analysis_data %>%
mutate(ANY_CONDITION = ifelse(DIABETES == "Yes" | COPD == "Yes" | ASTHMA == "Yes" | INMSUPR == "Yes" | HIPERTENSION == "Yes" | OTHER_DISEASE == "Yes" | CARDIOVASCULAR == "Yes" | OBESITY == "Yes" | RENAL_CHRONIC == "Yes" | TOBACCO == "Yes", "Yes", "No")) %>%
group_by(AGE_GROUP, ANY_CONDITION) %>%
summarise(Mortality_Rate = mean(DIED == "Yes"), .groups = 'drop')
# Plotting
bar_graph <- ggplot(mortality_rate, aes(x = AGE_GROUP, y = Mortality_Rate, fill = ANY_CONDITION)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "COVID-19 Mortality Rate by Age Group and Pre-existing Condition",
x = "Age Group",
y = "Mortality Rate",
fill = "Pre-existing Condition")
ggsave(
here::here ("output/Bingbing_graph.png"),
plot = bar_graph,
device = "png"
)
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
data <- read.csv(
file = here::here("raw_data/covid_sub.csv")
)
# Convert categorical columns to factors
data <- data %>%
mutate_at(vars(USMER, SEX, PATIENT_TYPE, INTUBED, PNEUMONIA, PREGNANT, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU), factor)
# Handling missing values: For simplicity, we'll convert NAs in binary columns to "Unknown"
binary_columns <- c("INTUBED", "PNEUMONIA", "PREGNANT", "DIABETES", "COPD", "ASTHMA", "INMSUPR", "HIPERTENSION", "OTHER_DISEASE", "CARDIOVASCULAR", "OBESITY", "RENAL_CHRONIC", "TOBACCO", "ICU")
data[binary_columns] <- lapply(data[binary_columns], function(x) addNA(x, ifany = TRUE))
# Assuming 'DATE_DIED' is NA for patients who didn't die, creating a binary outcome variable for mortality
data$DIED <- ifelse(is.na(data$DATE_DIED), "No", "Yes")
# Create a subset of data focusing on patient outcomes and conditions
analysis_data <- data %>%
select(SEX, AGE, PATIENT_TYPE, DIED, INTUBED, PNEUMONIA, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU)
# Creating a graph to analyze treatment outcomes and healthcare utilization
# Grouping age into categories
analysis_data$AGE_GROUP <- cut(analysis_data$AGE, breaks = c(0, 18, 40, 60, 80, Inf), labels = c("0-18", "19-40", "41-60", "61-80", "81+"), right = FALSE)
# Calculating mortality rate by age group and any pre-existing condition
mortality_rate <- analysis_data %>%
mutate(ANY_CONDITION = ifelse(DIABETES == "Yes" | COPD == "Yes" | ASTHMA == "Yes" | INMSUPR == "Yes" | HIPERTENSION == "Yes" | OTHER_DISEASE == "Yes" | CARDIOVASCULAR == "Yes" | OBESITY == "Yes" | RENAL_CHRONIC == "Yes" | TOBACCO == "Yes", "Yes", "No")) %>%
group_by(AGE_GROUP, ANY_CONDITION) %>%
summarise(Mortality_Rate = mean(DIED == "Yes"), .groups = 'drop')
# Plotting
bar_graph <- ggplot(mortality_rate, aes(x = AGE_GROUP, y = Mortality_Rate, fill = ANY_CONDITION)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "COVID-19 Mortality Rate by Age Group and Pre-existing Condition",
x = "Age Group",
y = "Mortality Rate",
fill = "Pre-existing Condition")
ggsave(
here::here ("output/Bingbing_graph.png"),
plot = bar_graph,
device = "png"
)
---
title: "Bingbing_Graph"
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
data <- read.csv(
file = here::here("raw_data/covid_sub.csv")
)
# Convert categorical columns to factors
data <- data %>%
mutate_at(vars(USMER,
SEX,
PATIENT_TYPE,
INTUBED,
PNEUMONIA,
PREGNANT,
DIABETES,
COPD,
ASTHMA,
INMSUPR,
HIPERTENSION,
OTHER_DISEASE,
CARDIOVASCULAR,
OBESITY,
RENAL_CHRONIC,
TOBACCO,
ICU),
factor)
# Handling missing values: For simplicity, we'll convert NAs in binary columns to "Unknown"
binary_columns <- c("INTUBED",
"PNEUMONIA",
"PREGNANT",
"DIABETES",
"COPD",
"ASTHMA",
"INMSUPR",
"HIPERTENSION",
"OTHER_DISEASE",
"CARDIOVASCULAR",
"OBESITY",
"RENAL_CHRONIC",
"TOBACCO",
"ICU")
data[binary_columns] <- lapply(data[binary_columns], function(x) addNA(x, ifany = TRUE))
# Assuming 'DATE_DIED' is NA for patients who didn't die, creating a binary outcome variable for mortality
data$DIED <- ifelse(is.na(data$DATE_DIED), "No", "Yes")
# Create a subset of data focusing on patient outcomes and conditions
analysis_data <- data %>%
select(SEX, AGE, PATIENT_TYPE, DIED, INTUBED, PNEUMONIA, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU)
analysis_data$AGE <- as.numeric(as.character(analysis_data$AGE))
analysis_data$AGE_GROUP <- cut(analysis_data$AGE, breaks = c(0, 18, 40, 60, 80, Inf),
labels = c("0-18",
"19-40",
"41-60",
"61-80",
"81+"),
right = FALSE)
mortality_rate <- analysis_data %>%
mutate(ANY_CONDITION = ifelse(DIABETES == "Yes" | COPD == "Yes" | ASTHMA == "Yes" | INMSUPR == "Yes" | HIPERTENSION == "Yes" | OTHER_DISEASE == "Yes" | CARDIOVASCULAR == "Yes" | OBESITY == "Yes" | RENAL_CHRONIC == "Yes" | TOBACCO == "Yes", "Yes", "No")) %>%
group_by(AGE_GROUP, ANY_CONDITION) %>%
summarise(Mortality_Rate = mean(DIED == "Yes"), .groups = 'drop')
# Plotting
bar_graph <- ggplot(mortality_rate, aes(x = AGE_GROUP, y = Mortality_Rate, fill = ANY_CONDITION)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "COVID-19 Mortality Rate by Age Group and Pre-existing Condition",
x = "Age Group",
y = "Mortality Rate",
fill = "Pre-existing Condition")
# Saving Graph
ggsave(
here::here ("output/Bingbing_graph.png"),
plot = bar_graph,
device = "png"
)
#Here
here::i_am("code/table_YingXu.R")
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
setwd('C:\Users\sleep\OneDrive - Emory University\2024 Spring\DATA 550\midproject')
setwd('C:/Users/sleep/OneDrive - Emory University/2024 Spring/DATA 550/midproject')
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
getwd()
library(here)
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
library(tidyverse)
here::i_am("code/Bingbing_graph.R")
library(tidyverse)
here::i_am("code/02_Bingbing_graph.R")
data <- read.csv(
file = here::here("raw_data/covid_sub.csv")
)
# Convert categorical columns to factors
data <- data %>%
mutate_at(vars(USMER, SEX, PATIENT_TYPE, INTUBED, PNEUMONIA, PREGNANT, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU), factor)
# Handling missing values: For simplicity, we'll convert NAs in binary columns to "Unknown"
binary_columns <- c("INTUBED", "PNEUMONIA", "PREGNANT", "DIABETES", "COPD", "ASTHMA", "INMSUPR", "HIPERTENSION", "OTHER_DISEASE", "CARDIOVASCULAR", "OBESITY", "RENAL_CHRONIC", "TOBACCO", "ICU")
data[binary_columns] <- lapply(data[binary_columns], function(x) addNA(x, ifany = TRUE))
# Assuming 'DATE_DIED' is NA for patients who didn't die, creating a binary outcome variable for mortality
data$DIED <- ifelse(is.na(data$DATE_DIED), "No", "Yes")
# Create a subset of data focusing on patient outcomes and conditions
analysis_data <- data %>%
select(SEX, AGE, PATIENT_TYPE, DIED, INTUBED, PNEUMONIA, DIABETES, COPD, ASTHMA, INMSUPR, HIPERTENSION, OTHER_DISEASE, CARDIOVASCULAR, OBESITY, RENAL_CHRONIC, TOBACCO, ICU)
# Creating a graph to analyze treatment outcomes and healthcare utilization
# Grouping age into categories
analysis_data$AGE_GROUP <- cut(analysis_data$AGE, breaks = c(0, 18, 40, 60, 80, Inf), labels = c("0-18", "19-40", "41-60", "61-80", "81+"), right = FALSE)
# Calculating mortality rate by age group and any pre-existing condition
mortality_rate <- analysis_data %>%
mutate(ANY_CONDITION = ifelse(DIABETES == "Yes" | COPD == "Yes" | ASTHMA == "Yes" | INMSUPR == "Yes" | HIPERTENSION == "Yes" | OTHER_DISEASE == "Yes" | CARDIOVASCULAR == "Yes" | OBESITY == "Yes" | RENAL_CHRONIC == "Yes" | TOBACCO == "Yes", "Yes", "No")) %>%
group_by(AGE_GROUP, ANY_CONDITION) %>%
summarise(Mortality_Rate = mean(DIED == "Yes"), .groups = 'drop')
# Plotting
bar_graph <- ggplot(mortality_rate, aes(x = AGE_GROUP, y = Mortality_Rate, fill = ANY_CONDITION)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "COVID-19 Mortality Rate by Age Group and Pre-existing Condition",
x = "Age Group",
y = "Mortality Rate",
fill = "Pre-existing Condition")
saveRDS(
bar_graph,
file = here::here("output/Bingbing_graph.rds")
)
#Here
here::i_am("code/01_table_YingXu.R")
#Read data
library(tidyverse)
covid_sub <- read_csv(file = here::here("raw_data/covid_sub.csv"))
#Construct table
library(gtsummary)
library(labelled)
var_label(covid_sub) <- list(
AGE = "Patient Age",
PATIENT_TYPE = "Patient Type",
PNEUMONIA = "Pneumonia",
DIABETES = "Diabetes",
ASTHMA = "Asthma",
INMSUPR = "Immunosuppressed",
HIPERTENSION = "Hypertension",
CARDIOVASCULAR = "Heart/blood vessels related disease",
RENAL_CHRONIC = "Chronic renal disease",
OTHER_DISEASE = "Other disease",
OBESITY = "Obese",
TOBACCO = "Tobacco user"
)
table_one <- covid_sub %>%
select("SEX", "AGE", "PATIENT_TYPE", "PNEUMONIA", "DIABETES", "COPD",
"ASTHMA", "INMSUPR", "HIPERTENSION", "CARDIOVASCULAR",
"RENAL_CHRONIC", "OTHER_DISEASE", "OBESITY", "TOBACCO") %>%
filter(AGE != "Unknown",
PNEUMONIA != "Unknown",
DIABETES != "Unknown",
COPD != "Unknown",
ASTHMA != "Unknown",
INMSUPR != "Unknown",
HIPERTENSION != "Unknown",
CARDIOVASCULAR != "Unknown",
RENAL_CHRONIC != "Unknown",
OTHER_DISEASE != "Unknown",
OBESITY != "Unknown",
TOBACCO != "Unknown") %>%
tbl_summary(by = SEX) %>%
add_overall() %>%
add_p()
#Save output
saveRDS(
table_one,
file = here::here("output/table_YingXu.rds")
)
here::i_am(
"code/05_render_report.R"
)
rmarkdown::render(
here::here("report.Rmd")
)
dim(covid19)
# Bootstrapping
library(drord)
data(covid19)
covid19$out01 <- as.numeric(covid19$out == 3)
# function to get g-comp point est of E[Y(1)], E[Y(0)], ATE
get_gcomp <- function(input_data, ratio = FALSE){
# fit outcome regression
or_fit <- glm(
out01 ~ treat + age_grp,
family = binomial(),
data = input_data
)
# set up prediction data frames
input_data_treat1 <- input_data
input_data_treat1$treat <- 1
input_data_treat0 <- input_data
input_data_treat0$treat <- 0
# predict from outcome model
pred1 <- predict(
or_fit, newdata = input_data_treat1, type = "response"
)
pred0 <- predict(
or_fit, newdata = input_data_treat0, type = "response"
)
# average predictions
EY1_hat <- mean(pred1)
EY0_hat <- mean(pred0)
if(!ratio){
ATE_hat <- EY1_hat - EY0_hat
}else{
ATE_hat <- EY1_hat / EY0_hat
}
return(c(
EY0_hat, EY1_hat, ATE_hat
))
}
# get point estimates
pt_est <- get_gcomp(input_data = covid19)
# function to do one bootstrap analysis
# input_data = the original data set
one_boot <- function(input_data, ratio = FALSE){
n <- dim(input_data)[1]
# sample with replacement from input_data
boot_row_idx <- sample(1:n, replace = TRUE)
boot_data <- input_data[boot_row_idx, ]
# get g-comp estimates on bootstrap data
boot_est <- get_gcomp(input_data = boot_data, ratio = ratio)
return(boot_est)
}
M <- 1000
boot_estimates <- replicate(M, one_boot(input_data = covid19))
# to get a data.frame with rows = bootstrap samples, columns = estimates
boot_estimates_df <- data.frame(t(boot_estimates))
colnames(boot_estimates_df) <- c(
"EY0_hat", "EY1_hat", "ATE_hat"
)
# make percentile confidence intervals
ci_EY0 <- quantile(
boot_estimates_df$EY0_hat,
p = c(0.025, 0.975)
)
# make "Wald-style" or Normal confidence interval
se_EY0_hat <- sd(boot_estimates_df$EY0_hat)
ci_EY0_wald <- c(
pt_est[1] - 1.96 * se_EY0_hat,
pt_est[1] + 1.96 * se_EY0_hat
)
# make "Wald-style" or Normal test statistic
# two-sided test of H0: ATE = 0
null_value <- 0
ATE_est <- pt_est[3]
se_ATE <- sd(boot_estimates_df$ATE_hat)
test_stat <- (ATE_est - null_value) / se_ATE
pvalue <- 2*pnorm(-abs(test_stat))
# note about ratio scale
boot_estimates_ratio <- replicate(
M, one_boot(input_data = covid19, ratio = TRUE)
)
# to get a data.frame with rows = bootstrap samples, columns = estimates
boot_estimates_df_ratio <- data.frame(t(boot_estimates_ratio))
colnames(boot_estimates_df_ratio) <- c(
"EY0_hat", "EY1_hat", "ATE_hat"
)
# get a confidence interval for the *log* risk ratio
boot_estimates_df_ratio$log_ATE_hat <- log(boot_estimates_df_ratio$ATE_hat)
se_log_ATE_hat <- sd(boot_estimates_df_ratio$log_ATE_hat)
pt_est_ratio <- get_gcomp(input_data = covid19, ratio = TRUE)
log_ATE_hat <- log(pt_est_ratio[3])
ci_log_ATE <- c(
log_ATE_hat - 1.96 * se_log_ATE_hat,
log_ATE_hat + 1.96 * se_log_ATE_hat
)
# risk ratio CI
ci_ATE <- exp(ci_log_ATE)
data(covid19)
nrow(covid19)
boot_estimates
boot_estimates[1:3,]
boot_estimates[1:3,1:3]
View(boot_estimates)
View(boot_estimates)
